# # 1 dependencies
# install.packages("devtools")
# library("devtools")
# devtools::install_github("klutometis/NLP")
library(roxygen2)
library(devtools)
setwd("~/git/")
install("SCED")
meta_analysis <- sced_meta_analysis(results)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
cache = TRUE,
echo = FALSE)
# auto install missing dependencies
auto_install_dependencies <- function(pkg){
new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new_pkg))
install.packages(new_pkg, dependencies = TRUE)
}
packages <- c("tidyverse", "knitr", "kableExtra", "broom", "bootES",
"coin", "survival", "effsize", "boot", "stringr", "metafor")
auto_install_dependencies(packages)
# # install Ian's custom dependencies (uncomment out the first time you run script)
# library(devtools)
# install_github("ianhussey/timesavers")
# install_github("ianhussey/SCED")
# load dependencies
library(SCED)  # from github/ianhussey
library(tidyverse)
library(knitr)
library(kableExtra)
library(metafor)
# load dependencies required by SCED
library(broom)
library(bootES)
library(coin)
library(survival)
library(effsize)
library(boot)
library(stringr)
library(timesavers)  # from github/ianhussey
# disable scientific notation
options(scipen = 999)
# knitr output for html
options(knitr.table.format = "html")
# get data
data <- read.csv("data.csv") %>%
# ensure some variables are factors
mutate(Participant = as.factor(Participant),
Condition = as.factor(Condition))
# results <- sced_analysis(data = data)
# save(results, file = "results.RData")
load("results.Rdata")
sced_summary(results = results) %>%
kable() %>%  # print nicer looking table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
sced_plot(data = data)
library(plotrix)
# plot function
source("geom_flat_violin.R")
data_with_summaries <- data %>%
group_by(Participant, Condition) %>%
mutate(mean = mean(Score),
std.error = std.error(Score)) %>%
ungroup() %>%
mutate(mean_A = ifelse(Condition == as.character("A"), mean, NA),
mean_B = ifelse(Condition == as.character("B"), mean, NA),
std.error_A = ifelse(Condition == as.character("A"), std.error, NA),
std.error_B = ifelse(Condition == as.character("B"), std.error, NA))
ggplot(data = data_with_summaries,
aes(x = Participant, y = Score, fill = Condition)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .7, adjust = 2) +
geom_point(aes(y = Score, color = Condition),
position = position_jitter(width = .15), size = .5, alpha = 0.8) +
# geom_point(aes(x = Participant, y = mean),
#            position = position_nudge(x = 0.35), size = 1) +
# geom_errorbar(aes(ymin = mean - std.error*1.96, ymax = mean + std.error*1.96),
#               position = position_nudge(x = 0.35), width = 0) +
geom_point(aes(x = Participant, y = mean_A),
position = position_nudge(x = 0.25), size = 1) +
geom_point(aes(x = Participant, y = mean_B),
position = position_nudge(x = 0.35), size = 1) +
geom_errorbar(aes(ymin = mean - std.error*1.96, ymax = mean_A + std.error_A*1.96),
position = position_nudge(x = 0.25), width = 0) +
geom_errorbar(aes(ymin = mean - std.error*1.96, ymax = mean_B + std.error_B*1.96),
position = position_nudge(x = 0.35), width = 0) +
guides(fill = FALSE) +
guides(color = FALSE) +
coord_flip() +
scale_colour_viridis_d(end = 0.6) +
scale_fill_viridis_d(end = 0.6) +
theme_classic() +
xlab("Participant") +
ylab("Score")
meta_analysis <- sced_meta_analysis(results)
meta_analysis <- sced_meta_analysis(results)
meta_analysis$meta_analysed_effect_size %>%
kable() %>%  # print nicer looking table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
# get data
data <- read.csv("data.csv") %>%
# ensure some variables are factors
mutate(Participant = as.factor(Participant),
Condition = as.factor(Condition))
View(data)
intervention_point <- data %>%
filter(Condition == "B")
intervention_point <- data %>%
filter(Condition == "B") %>%
group_by(Participant) %>%
summarize(intervention_point = min(Timepoint)) %>%
ungroup()
View(intervention_point)
# get data
input_data <- read.csv("data.csv") %>%
# ensure some variables are factors
mutate(Participant = as.factor(Participant),
Condition = as.factor(Condition))
intervention_point <- input_data %>%
filter(Condition == "B") %>%
group_by(Participant) %>%
summarize(intervention_point = min(Timepoint)) %>%
ungroup()
data <- left_join(input_data, intervention_point, by = "Participant")
mutate(Participant = fct_relevel(Participant, intervention_point)
data <- left_join(input_data, intervention_point, by = "Participant") %>%
mutate(Participant = fct_relevel(Participant, intervention_point))
data <- left_join(input_data, intervention_point, by = "Participant") %>%
mutate(Participant = fct_relevel(Participant, as.numeric(as.character(intervention_point))))
sapply(input_data, type)
sapply(input_data, class)
data <- left_join(input_data, intervention_point, by = "Participant") %>%
mutate(Participant = fct_reorder(Participant, intervention_point))
results <- sced_analysis(data = data)
sced_summary(results = results) %>%
kable() %>%  # print nicer looking table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
sced_plot(data = data)
data_with_condition_change <- data %>%
group_by(Participant) %>%
dplyr::summarize(condition_change = max(Timepoint[Condition == "A"]) + 0.5) %>%
right_join(data, by = "Participant") %>%
group_by(Participant, Condition) %>%
mutate(median_score = median(Score)) %>%
ungroup()
View(data_with_condition_change)
intervention_point <- data %>%
filter(Condition == "B") %>%
group_by(Participant) %>%
summarize(intervention_point = min(Timepoint)) %>%
ungroup()
data <- data %>%
mutate(Participant = fct_reorder(Participant, intervention_point))
plot <-
ggplot(data_with_condition_change) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = data_with_condition_change$condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
plot
data_with_condition_change <- data %>%
group_by(Participant) %>%
dplyr::summarize(condition_change = max(Timepoint[Condition == "A"]) + 0.5) %>%
right_join(data, by = "Participant") %>%
group_by(Participant, Condition) %>%
mutate(median_score = median(Score)) %>%
ungroup()
intervention_point <- data %>%
filter(Condition == "B") %>%
group_by(Participant) %>%
summarize(intervention_point = min(Timepoint)) %>%
ungroup()
plot_data <- data_with_condition_change %>%
mutate(Participant = fct_reorder(Participant, intervention_point))
plot <-
ggplot(plot_data) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = data_with_condition_change$condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
plot
plot <-
ggplot(plot_data) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
plot
sced_plot <- function(data) {
require(tidyverse)
data_with_condition_change <- data %>%
group_by(Participant) %>%
dplyr::summarize(condition_change = max(Timepoint[Condition == "A"]) + 0.5) %>%
right_join(data, by = "Participant") %>%
group_by(Participant, Condition) %>%
mutate(median_score = median(Score)) %>%
ungroup()
intervention_point <- data %>%
filter(Condition == "B") %>%
group_by(Participant) %>%
summarize(intervention_point = min(Timepoint)) %>%
ungroup()
plot_data <- data_with_condition_change %>%
mutate(Participant = fct_reorder(Participant, intervention_point))
plot <-
ggplot(plot_data) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
return(plot)
}
sced_plot(data = data)
sced_plot(data = data)
library(devtools)
setwd("~/git/SCED")
document()
library(devtools)
setwd("~/git/")
install("SCED")
save(results, file = "results.RData")
data_with_condition_change <- data %>%
group_by(Participant) %>%
dplyr::summarize(condition_change = max(Timepoint[Condition == "A"]) + 0.5) %>%
right_join(data, by = "Participant") %>%
group_by(Participant, Condition) %>%
mutate(median_score = median(Score)) %>%
ungroup()
intervention_point <- data %>%
filter(Condition == "B") %>%
group_by(Participant) %>%
summarize(intervention_point = min(Timepoint)) %>%
ungroup()
plot_data <- data_with_condition_change %>%
mutate(Participant = fct_reorder(Participant, intervention_point))
plot <-
ggplot(plot_data) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
plot
sced_plot(data = data)
sced_plot(data = data)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
cache = TRUE,
echo = FALSE)
# auto install missing dependencies
auto_install_dependencies <- function(pkg){
new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new_pkg))
install.packages(new_pkg, dependencies = TRUE)
}
packages <- c("tidyverse", "knitr", "kableExtra", "broom", "bootES",
"coin", "survival", "effsize", "boot", "stringr", "metafor")
auto_install_dependencies(packages)
# # install Ian's custom dependencies (uncomment out the first time you run script)
# library(devtools)
# install_github("ianhussey/timesavers")
# install_github("ianhussey/SCED")
# load dependencies
library(SCED)  # from github/ianhussey
library(tidyverse)
library(knitr)
library(kableExtra)
library(metafor)
# load dependencies required by SCED
library(broom)
library(bootES)
library(coin)
library(survival)
library(effsize)
library(boot)
library(stringr)
library(timesavers)  # from github/ianhussey
# disable scientific notation
options(scipen = 999)
# knitr output for html
options(knitr.table.format = "html")
# get data
data <- read.csv("data.csv") %>%
# ensure some variables are factors
mutate(Participant = as.factor(Participant),
Condition = as.factor(Condition))
results <- sced_analysis(data = data)
save(results, file = "results.RData")
my_data <- read.csv("data.csv") %>%
slice(1:20)
View(my_data)
my_data_20 <- my_data %>% slice(1:(n()))
rma(yi = yi, sei = sei, data = my_data_20)  %>%
forest(., xlab = "Cohen's d", ylim = c(-1, 24),
xlim = c(-2, 2), at=c(-1, -.5, 0, .5, 1))
sced_summary(results = results) %>%
kable() %>%  # print nicer looking table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
sced_plot(data = data)
data_with_condition_change <- data %>%
group_by(Participant) %>%
dplyr::summarize(condition_change = max(Timepoint[Condition == "A"]) + 0.5) %>%
right_join(data, by = "Participant") %>%
group_by(Participant, Condition) %>%
mutate(median_score = median(Score)) %>%
ungroup()
intervention_point <- data %>%
filter(Condition == "B") %>%
group_by(Participant) %>%
summarize(intervention_point = min(Timepoint)) %>%
ungroup()
plot_data <- data_with_condition_change %>%
mutate(Participant = fct_reorder(Participant, intervention_point))
require(forcats)
plot_data <- data_with_condition_change %>%
mutate(Participant = forcats::fct_reorder(Participant, intervention_point))
plot_data <- intervention_point %>%
mutate(Participant = forcats::fct_reorder(Participant, intervention_point))
plot <-
ggplot(plot_data) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
plot
plot_data <- intervention_point %>%
mutate(Participant = forcats::fct_reorder(Participant, intervention_point))
ggplot(plot_data) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
View(plot_data)
plot_data <- data_with_condition_change %>%
left_join(intervention_point, by = "Participant") %>%
mutate(Participant = forcats::fct_reorder(Participant, intervention_point))
plot <-
ggplot(plot_data) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
plot
p
sced_plot <- function(data) {
require(tidyverse)
require(forcats)
data_with_condition_change <- data %>%
group_by(Participant) %>%
dplyr::summarize(condition_change = max(Timepoint[Condition == "A"]) + 0.5) %>%
right_join(data, by = "Participant") %>%
group_by(Participant, Condition) %>%
mutate(median_score = median(Score)) %>%
ungroup()
intervention_point <- data %>%
filter(Condition == "B") %>%
group_by(Participant) %>%
summarize(intervention_point = min(Timepoint)) %>%
ungroup()
plot_data <- data_with_condition_change %>%
left_join(intervention_point, by = "Participant") %>%
mutate(Participant = forcats::fct_reorder(Participant, intervention_point))
plot <-
ggplot(plot_data) +
geom_smooth(aes(x = Timepoint, y = Score, group = Condition), method = "lm", alpha = 0.15, colour = "black") +  # or loess
geom_line(aes(x = Timepoint, y = median_score, group = Condition), linetype = "dashed") +
geom_point(aes(x = Timepoint, y = Score, group = Condition)) +  # , color = is_median_color
geom_line(aes(x = Timepoint, y = Score, group = Condition)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_vline(aes(xintercept = condition_change), linetype = "dotted", color = "black") +
theme_classic() +
scale_color_manual(values = c("#000000", "#bc1414")) +  # second color for median highlights, to be added.
theme(legend.position = "none") +
facet_wrap(~Participant, ncol = 1)
return(plot)
}
sced_plot(data = data)
sced_plot(data = data)
library(devtools)
setwd("~/git/SCED")
document()
